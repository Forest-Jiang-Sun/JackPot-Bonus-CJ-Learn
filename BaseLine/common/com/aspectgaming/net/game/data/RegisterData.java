// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from GameProtocol.proto

package com.aspectgaming.net.game.data;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

public final class RegisterData implements Externalizable, Message<RegisterData>, Schema<RegisterData> {

    public static Schema<RegisterData> getSchema() {
        return DEFAULT_INSTANCE;
    }

    public static RegisterData getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    static final RegisterData DEFAULT_INSTANCE = new RegisterData();

    public String Screen;
    public String Game;
    public String Version;
    public String DefaultStops;
    public String Properties;
    public List<String> RegisterData;
    public List<String> RegisterActions;
    public List<String> Params;

    public RegisterData() {}

    @Override
    public String toString() {
        return "RegisterData{" +
                    "screen=" + Screen +
                    ", game=" + Game +
                    ", version=" + Version +
                    ", defaultStops=" + DefaultStops +
                    ", properties=" + Properties +
                    ", registerData=" + RegisterData +
                    ", registerActions=" + RegisterActions +
                    ", params=" + Params +
                '}';
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<RegisterData> cachedSchema() {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public RegisterData newMessage() {
        return new RegisterData();
    }

    public Class<RegisterData> typeClass() {
        return RegisterData.class;
    }

    public String messageName() {
        return RegisterData.class.getSimpleName();
    }

    public String messageFullName() {
        return RegisterData.class.getName();
    }

    public boolean isInitialized(RegisterData message) {
        return true;
    }

    public void mergeFrom(Input input, RegisterData message) throws IOException {
        try {
            for (int number = input.readFieldNumber(this);; number = input.readFieldNumber(this)) {
                switch (number) {
                case 0:
                    return;
                case 1:
                    message.Screen = input.readString();
                    break;
                case 2:
                    message.Game = input.readString();
                    break;
                case 3:
                    message.Version = input.readString();
                    break;
                case 4:
                    message.DefaultStops = input.readString();
                    break;
                case 5:
                    message.Properties = input.readString();
                    break;
                case 6:
                    if (message.RegisterData == null) message.RegisterData = new ArrayList<String>();
                    message.RegisterData.add(input.readString());
                    break;
                case 7:
                    if (message.RegisterActions == null) message.RegisterActions = new ArrayList<String>();
                    message.RegisterActions.add(input.readString());
                    break;
                case 8:
                    if (message.Params == null) message.Params = new ArrayList<String>();
                    message.Params.add(input.readString());
                    break;
                default:
                    input.handleUnknownField(number, this);
                }
            }
        } finally {
            if (message.RegisterData != null) message.RegisterData = java.util.Collections.unmodifiableList(message.RegisterData);
            else message.RegisterData = java.util.Collections.emptyList();
            if (message.RegisterActions != null) message.RegisterActions = java.util.Collections.unmodifiableList(message.RegisterActions);
            else message.RegisterActions = java.util.Collections.emptyList();
            if (message.Params != null) message.Params = java.util.Collections.unmodifiableList(message.Params);
            else message.Params = java.util.Collections.emptyList();
        }
    }

    public void writeTo(Output output, RegisterData message) throws IOException {
        if (message.Screen != null) output.writeString(1, message.Screen, false);

        if (message.Game != null) output.writeString(2, message.Game, false);

        if (message.Version != null) output.writeString(3, message.Version, false);

        if (message.DefaultStops != null) output.writeString(4, message.DefaultStops, false);

        if (message.Properties != null) output.writeString(5, message.Properties, false);

        if (message.RegisterData != null) {
            for (String registerData : message.RegisterData) {
                if (registerData != null) output.writeString(6, registerData, true);
            }
        }

        if (message.RegisterActions != null) {
            for (String registerActions : message.RegisterActions) {
                if (registerActions != null) output.writeString(7, registerActions, true);
            }
        }

        if (message.Params != null) {
            for (String params : message.Params) {
                if (params != null) output.writeString(8, params, true);
            }
        }
    }

    public String getFieldName(int number) {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name) {
        return Integer.parseInt(name);
    }

}
