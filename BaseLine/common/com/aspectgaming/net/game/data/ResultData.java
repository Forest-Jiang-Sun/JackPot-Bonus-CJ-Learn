// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from GameProtocol.proto

package com.aspectgaming.net.game.data;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.aspectgaming.net.ProtoUtil;

public final class ResultData implements Externalizable, Message<ResultData>, Schema<ResultData> {

    public static Schema<ResultData> getSchema() {
        return DEFAULT_INSTANCE;
    }

    public static ResultData getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    static final ResultData DEFAULT_INSTANCE = new ResultData();

    public int[] Stops;
    public int[] StopsIndices;
    public int NumFreeSpinsWon;
    public int SpecialMask;
    public int ScatterMask;
    public int ScatterWin;
    public int ScatterMultiplier;
    public long[] PaylineMask;
    public int[] PaylineWin;
    public int[] PaylineMultiplier;

    public ResultData() {}

    @Override
    public String toString() {
        return "ResultData{" +
                    "stops=" + Stops +
                    ", stopsIndices=" + StopsIndices +
                    ", numFreeSpinsWon=" + NumFreeSpinsWon +
                    ", specialMask=" + SpecialMask +
                    ", scatterMask=" + ScatterMask +
                    ", scatterWin=" + ScatterWin +
                    ", scatterMultiplier=" + ScatterMultiplier +
                    ", paylineMask=" + PaylineMask +
                    ", paylineWin=" + PaylineWin +
                    ", paylineMultiplier=" + PaylineMultiplier +
                '}';
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<ResultData> cachedSchema() {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public ResultData newMessage() {
        return new ResultData();
    }

    public Class<ResultData> typeClass() {
        return ResultData.class;
    }

    public String messageName() {
        return ResultData.class.getSimpleName();
    }

    public String messageFullName() {
        return ResultData.class.getName();
    }

    public boolean isInitialized(ResultData message) {
        return true;
    }

    public void mergeFrom(Input input, ResultData message) throws IOException {
        List<Integer> Stops = null;
        List<Integer> StopsIndices = null;
        List<Long> PaylineMask = null;
        List<Integer> PaylineWin = null;
        List<Integer> PaylineMultiplier = null;

        try {
            for (int number = input.readFieldNumber(this);; number = input.readFieldNumber(this)) {
                switch (number) {
                case 0:
                    return;
                case 1:
                    if (Stops == null) Stops = new ArrayList<Integer>();
                    Stops.add(input.readInt32());
                    break;
                case 2:
                    if (StopsIndices == null) StopsIndices = new ArrayList<Integer>();
                    StopsIndices.add(input.readInt32());
                    break;
                case 3:
                    message.NumFreeSpinsWon = input.readInt32();
                    break;
                case 4:
                    message.SpecialMask = input.readInt32();
                    break;
                case 5:
                    message.ScatterMask = input.readInt32();
                    break;
                case 6:
                    message.ScatterWin = input.readInt32();
                    break;
                case 7:
                    message.ScatterMultiplier = input.readInt32();
                    break;
                case 8:
                    if (PaylineMask == null) PaylineMask = new ArrayList<Long>();
                    PaylineMask.add(input.readInt64());
                    break;
                case 9:
                    if (PaylineWin == null) PaylineWin = new ArrayList<Integer>();
                    PaylineWin.add(input.readInt32());
                    break;
                case 10:
                    if (PaylineMultiplier == null) PaylineMultiplier = new ArrayList<Integer>();
                    PaylineMultiplier.add(input.readInt32());
                    break;
                default:
                    input.handleUnknownField(number, this);
                }
            }
        } finally {
            message.Stops = ProtoUtil.toIntArray(Stops);
            message.StopsIndices = ProtoUtil.toIntArray(StopsIndices);
            message.PaylineMask = ProtoUtil.toLongArray(PaylineMask);
            message.PaylineWin = ProtoUtil.toIntArray(PaylineWin);
            message.PaylineMultiplier = ProtoUtil.toIntArray(PaylineMultiplier);
        }
    }

    public void writeTo(Output output, ResultData message) throws IOException {
        if (message.Stops != null) {
            for (Integer stops : message.Stops) {
                if (stops != null) output.writeInt32(1, stops, true);
            }
        }

        if (message.StopsIndices != null) {
            for (Integer stopsIndices : message.StopsIndices) {
                if (stopsIndices != null) output.writeInt32(2, stopsIndices, true);
            }
        }

        if (message.NumFreeSpinsWon != 0) output.writeInt32(3, message.NumFreeSpinsWon, false);

        if (message.SpecialMask != 0) output.writeInt32(4, message.SpecialMask, false);

        if (message.ScatterMask != 0) output.writeInt32(5, message.ScatterMask, false);

        if (message.ScatterWin != 0) output.writeInt32(6, message.ScatterWin, false);

        if (message.ScatterMultiplier != 0) output.writeInt32(7, message.ScatterMultiplier, false);

        if (message.PaylineMask != null) {
            for (Long paylineMask : message.PaylineMask) {
                if (paylineMask != null) output.writeInt64(8, paylineMask, true);
            }
        }

        if (message.PaylineWin != null) {
            for (Integer paylineWin : message.PaylineWin) {
                if (paylineWin != null) output.writeInt32(9, paylineWin, true);
            }
        }

        if (message.PaylineMultiplier != null) {
            for (Integer paylineMultiplier : message.PaylineMultiplier) {
                if (paylineMultiplier != null) output.writeInt32(10, paylineMultiplier, true);
            }
        }
    }

    public String getFieldName(int number) {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name) {
        return Integer.parseInt(name);
    }

}
