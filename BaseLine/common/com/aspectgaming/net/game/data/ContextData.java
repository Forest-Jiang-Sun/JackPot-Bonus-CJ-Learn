// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from GameProtocol.proto

package com.aspectgaming.net.game.data;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

public final class ContextData implements Externalizable, Message<ContextData>, Schema<ContextData> {

    public static Schema<ContextData> getSchema() {
        return DEFAULT_INSTANCE;
    }

    public static ContextData getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    static final ContextData DEFAULT_INSTANCE = new ContextData();

    public int State;
    public int GameState;

    // player choice
    public String Language;
    public String Theme;
    public String Paytable;
    public int Denomination;
    public int SelectedBonus;
    public int Selections;
    public int BetMultiplier;
    public int BetCredits;

    // meters
    public long Cash; // cents
    public long Credits;
    public long TotalBet;
    public long ExtraBet;
    public long TotalWin;
    public long BaseGameTotalWin;
    public long FreeGameTotalWin;
    public long ProgressiveTotalWin; // cents
    public long BonusTotalWin;
    public long GambleTotalWin;
    public long GamesSinceLastFeature;
    public int NumFreeSpinsTotalWon;
    public int NumFreeSpinsRemaining;
    public List<String> Messages;
    public String MoneyRelatedMessages;
    public boolean AutoPlay;
    public boolean TestMode;
    public boolean FreeGameMode;
    public boolean SpecialGameMode;
    public boolean LoggedIn;
    public byte[] WinLossHistory;
    public byte[] ScreenButtonStates;
    public int ActiveBonusType;
    public long Win;
    public List<MathParam> MathParams;
    public ResultData Result;
    public List<ResultData> MultipleResults;
    public GambleData Gamble;
    public BonusData BonusPick;
    public ProgressiveData Progressive;
    public long CashableCents;
    public long NonRestrictedCents;
    public long RestrictedCents;
    public long MaxBet;
    public long StateLongData;
    public String StateStringData;
    public ButtonPanelData ButtonPanel;

    public ContextData() {}

    @Override
    public String toString() {
        return "ContextData{" +
                    "state=" + State +
                    ", gameState=" + GameState +
                    ", language=" + Language +
                    ", theme=" + Theme +
                    ", paytable=" + Paytable +
                    ", denomination=" + Denomination +
                    ", selectedBonus=" + SelectedBonus +
                    ", selections=" + Selections +
                    ", betMultiplier=" + BetMultiplier +
                    ", betCredits=" + BetCredits +
                    ", cash=" + Cash +
                    ", credits=" + Credits +
                    ", totalBet=" + TotalBet +
                    ", extraBet=" + ExtraBet +
                    ", totalWin=" + TotalWin +
                    ", baseGameTotalWin=" + BaseGameTotalWin +
                    ", freeGameTotalWin=" + FreeGameTotalWin +
                    ", progressiveTotalWin=" + ProgressiveTotalWin +
                    ", bonusTotalWin=" + BonusTotalWin +
                    ", gambleTotalWin=" + GambleTotalWin +
                    ", gamesSinceLastFeature=" + GamesSinceLastFeature +
                    ", numFreeSpinsTotalWon=" + NumFreeSpinsTotalWon +
                    ", numFreeSpinsRemaining=" + NumFreeSpinsRemaining +
                    ", messages=" + Messages +
                    ", moneyRelatedMessages=" + MoneyRelatedMessages +
                    ", autoplay=" + AutoPlay +
                    ", testMode=" + TestMode +
                    ", freeGameMode=" + FreeGameMode +
                    ", specialGameMode=" + SpecialGameMode +
                    ", loggedIn=" + LoggedIn +
                    ", winLossHistory=" + WinLossHistory +
                    ", screenButtonStates=" + ScreenButtonStates +
                    ", activeBonusType=" + ActiveBonusType +
                    ", win=" + Win +
                    ", mathParams=" + MathParams +
                    ", result=" + Result +
                    ", multipleResults=" + MultipleResults +
                    ", gamble=" + Gamble +
                    ", bonusPick=" + BonusPick +
                    ", progressive=" + Progressive +
                    ", cashableCents=" + CashableCents +
                    ", nonRestrictedCents=" + NonRestrictedCents +
                    ", restrictedCents=" + RestrictedCents +
                    ", maxBet=" + MaxBet +
                    ", stateLongData=" + StateLongData +
                    ", stateStringData=" + StateStringData +
                    ", buttonPanel=" + ButtonPanel +
                '}';
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<ContextData> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public ContextData newMessage()
    {
        return new ContextData();
    }

    public Class<ContextData> typeClass()
    {
        return ContextData.class;
    }

    public String messageName()
    {
        return ContextData.class.getSimpleName();
    }

    public String messageFullName()
    {
        return ContextData.class.getName();
    }

    public boolean isInitialized(ContextData message)
    {
        return true;
    }

    public void mergeFrom(Input input, ContextData message) throws IOException
    {
        try {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.State = input.readInt32();
                    break;
                case 2:
                    message.GameState = input.readInt32();
                    break;
                case 10:
                    message.Language = input.readString();
                    break;
                case 11:
                    message.Theme = input.readString();
                    break;
                case 12:
                    message.Paytable = input.readString();
                    break;
                case 13:
                    message.Denomination = input.readInt32();
                    break;
                case 14:
                    message.SelectedBonus = input.readInt32();
                    break;
                case 15:
                    message.Selections = input.readInt32();
                    break;
                case 16:
                    message.BetMultiplier = input.readInt32();
                    break;
                case 17:
                    message.BetCredits = input.readInt32();
                    break;
                case 20:
                    message.Cash = input.readInt64();
                    break;
                case 21:
                    message.Credits = input.readInt64();
                    break;
                case 22:
                    message.TotalBet = input.readInt64();
                    break;
                case 23:
                    message.ExtraBet = input.readInt64();
                    break;
                case 24:
                    message.TotalWin = input.readInt64();
                    break;
                case 25:
                    message.BaseGameTotalWin = input.readInt64();
                    break;
                case 26:
                    message.FreeGameTotalWin = input.readInt64();
                    break;
                case 27:
                    message.ProgressiveTotalWin = input.readInt64();
                    break;
                case 28:
                    message.BonusTotalWin = input.readInt64();
                    break;
                case 29:
                    message.GambleTotalWin = input.readInt64();
                    break;
                case 30:
                    message.GamesSinceLastFeature = input.readInt64();
                    break;
                case 31:
                    message.NumFreeSpinsTotalWon = input.readInt32();
                    break;
                case 32:
                    message.NumFreeSpinsRemaining = input.readInt32();
                    break;
                case 40:
                    if (message.Messages == null) message.Messages = new ArrayList<String>();
                    message.Messages.add(input.readString());
                    break;
                case 41:
                    message.MoneyRelatedMessages = input.readString();
                    break;
                case 43:
                    message.AutoPlay = input.readBool();
                    break;
                case 44:
                    message.TestMode = input.readBool();
                    break;
                case 45:
                    message.FreeGameMode = input.readBool();
                    break;
                case 46:
                    message.SpecialGameMode = input.readBool();
                    break;
                case 47:
                    message.LoggedIn = input.readBool();
                    break;
                case 48:
                    message.WinLossHistory = input.readByteArray();
                    break;
                case 49:
                    message.ScreenButtonStates = input.readByteArray();
                    break;
                case 50:
                    message.ActiveBonusType = input.readInt32();
                    break;
                case 60:
                    message.Win = input.readInt64();
                    break;
                case 61:
                    if (message.MathParams == null) message.MathParams = new ArrayList<MathParam>();
                    message.MathParams.add(input.mergeObject(null, MathParam.getSchema()));
                    break;

                case 62:
                    message.Result = input.mergeObject(message.Result, ResultData.getSchema());
                    break;

                case 63:
                    if (message.MultipleResults == null) message.MultipleResults = new ArrayList<ResultData>();
                    message.MultipleResults.add(input.mergeObject(null, ResultData.getSchema()));
                    break;

                case 64:
                    message.Gamble = input.mergeObject(message.Gamble, GambleData.getSchema());
                    break;

                case 65:
                    message.BonusPick = input.mergeObject(message.BonusPick, BonusData.getSchema());
                    break;

                case 66:
                    message.Progressive = input.mergeObject(message.Progressive, ProgressiveData.getSchema());
                    break;

                case 67:
                    message.CashableCents = input.readInt64();
                    break;
                case 68:
                    message.NonRestrictedCents = input.readInt64();
                    break;
                case 69:
                    message.RestrictedCents = input.readInt64();
                    break;
                case 70:
                    message.MaxBet = input.readInt64();
                    break;
                case 71:
                    message.StateLongData = input.readInt64();
                    break;
                case 72:
                    message.StateStringData = input.readString();
                    break;
                case 73:
                    message.ButtonPanel = input.mergeObject(message.ButtonPanel, ButtonPanelData.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
                }
            }
        } finally {
            if (message.Messages != null) message.Messages = java.util.Collections.unmodifiableList(message.Messages);
            else message.Messages = java.util.Collections.emptyList();
            if (message.MathParams != null) message.MathParams = java.util.Collections.unmodifiableList(message.MathParams);
            else message.MathParams = java.util.Collections.emptyList();
            if (message.MultipleResults != null) message.MultipleResults = java.util.Collections.unmodifiableList(message.MultipleResults);
            else message.MultipleResults = java.util.Collections.emptyList();
        }
    }

    public void writeTo(Output output, ContextData message) throws IOException {
        if (message.State != 0) output.writeInt32(1, message.State, false);

        if (message.GameState != 0) output.writeInt32(2, message.GameState, false);

        if (message.Language != null) output.writeString(10, message.Language, false);

        if (message.Theme != null) output.writeString(11, message.Theme, false);

        if (message.Paytable != null) output.writeString(12, message.Paytable, false);

        if (message.Denomination != 0) output.writeInt32(13, message.Denomination, false);

        if (message.SelectedBonus != 0) output.writeInt32(14, message.SelectedBonus, false);

        if (message.Selections != 0) output.writeInt32(15, message.Selections, false);

        if (message.BetMultiplier != 0) output.writeInt32(16, message.BetMultiplier, false);

        if (message.BetCredits != 0) output.writeInt32(17, message.BetCredits, false);

        if (message.Cash != 0) output.writeInt64(20, message.Cash, false);

        if (message.Credits != 0) output.writeInt64(21, message.Credits, false);

        if (message.TotalBet != 0) output.writeInt64(22, message.TotalBet, false);

        if (message.ExtraBet != 0) output.writeInt64(23, message.ExtraBet, false);

        if (message.TotalWin != 0) output.writeInt64(24, message.TotalWin, false);

        if (message.BaseGameTotalWin != 0) output.writeInt64(25, message.BaseGameTotalWin, false);

        if (message.FreeGameTotalWin != 0) output.writeInt64(26, message.FreeGameTotalWin, false);

        if (message.ProgressiveTotalWin != 0) output.writeInt64(27, message.ProgressiveTotalWin, false);

        if (message.BonusTotalWin != 0) output.writeInt64(28, message.BonusTotalWin, false);

        if (message.GambleTotalWin != 0) output.writeInt64(29, message.GambleTotalWin, false);

        if (message.GamesSinceLastFeature != 0) output.writeInt64(30, message.GamesSinceLastFeature, false);

        if (message.NumFreeSpinsTotalWon != 0) output.writeInt32(31, message.NumFreeSpinsTotalWon, false);

        if (message.NumFreeSpinsRemaining != 0) output.writeInt32(32, message.NumFreeSpinsRemaining, false);

        if (message.Messages != null) {
            for (String messages : message.Messages) {
                if (messages != null) output.writeString(40, messages, true);
            }
        }

        if (message.MoneyRelatedMessages != null) output.writeString(41, message.MoneyRelatedMessages, false);

        if (message.AutoPlay) output.writeBool(43, message.AutoPlay, false);

        if (message.TestMode) output.writeBool(44, message.TestMode, false);

        if (message.FreeGameMode) output.writeBool(45, message.FreeGameMode, false);

        if (message.SpecialGameMode) output.writeBool(46, message.SpecialGameMode, false);

        if (message.LoggedIn) output.writeBool(47, message.LoggedIn, false);

        if (message.WinLossHistory != null) output.writeByteArray(48, message.WinLossHistory, false);

        if (message.ScreenButtonStates != null) output.writeByteArray(49, message.ScreenButtonStates, false);

        if (message.ActiveBonusType != 0) output.writeInt32(50, message.ActiveBonusType, false);

        if (message.Win != 0) output.writeInt64(60, message.Win, false);

        if (message.MathParams != null) {
            for (MathParam mathParams : message.MathParams) {
                if (mathParams != null) output.writeObject(61, mathParams, MathParam.getSchema(), true);
            }
        }

        if (message.Result != null) output.writeObject(62, message.Result, ResultData.getSchema(), false);

        if (message.MultipleResults != null) {
            for (ResultData multipleResults : message.MultipleResults) {
                if (multipleResults != null) output.writeObject(63, multipleResults, ResultData.getSchema(), true);
            }
        }

        if (message.Gamble != null) output.writeObject(64, message.Gamble, GambleData.getSchema(), false);

        if (message.BonusPick != null) output.writeObject(65, message.BonusPick, BonusData.getSchema(), false);

        if (message.Progressive != null) output.writeObject(66, message.Progressive, ProgressiveData.getSchema(), false);


        if(message.CashableCents != 0)
            output.writeInt64(67, message.CashableCents, false);

        if(message.NonRestrictedCents != 0)
            output.writeInt64(68, message.NonRestrictedCents, false);

        if(message.RestrictedCents != 0)
            output.writeInt64(69, message.RestrictedCents, false);

        if(message.MaxBet != 0)
            output.writeInt64(70, message.MaxBet, false);

        if(message.StateLongData != 0)
            output.writeInt64(71, message.StateLongData, false);

        if(message.StateStringData != null)
            output.writeString(72, message.StateStringData, false);

        if(message.ButtonPanel != null)
             output.writeObject(73, message.ButtonPanel, ButtonPanelData.getSchema(), false);

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
