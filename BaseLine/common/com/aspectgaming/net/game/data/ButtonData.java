// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from GameProtocol.proto

package com.aspectgaming.net.game.data;

import io.protostuff.*;

import javax.annotation.Generated;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

@Generated("java_bean")
public final class ButtonData implements Externalizable, Message<ButtonData>, Schema<ButtonData>
{

    public static Schema<ButtonData> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static ButtonData getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ButtonData DEFAULT_INSTANCE = new ButtonData();

    
    private String name;
    private Long value;
    private String type;
    private Boolean enabled;
    private Boolean startPlay;
    private String backgroundImage;

    public ButtonData()
    {

    }

    @Override
    public String toString() {
        return "ButtonData{" +
                    "name=" + name +
                    ", value=" + value +
                    ", type=" + type +
                    ", enabled=" + enabled +
                    ", startPlay=" + startPlay +
                    ", backgroundImage=" + backgroundImage +
                '}';
    }
    // getters and setters

    // name

    public String getName()
    {
        return name;
    }


    public void setName(String name)
    {
        this.name = name;
    }

    // value

    public Long getValue()
    {
        return value;
    }


    public void setValue(Long value)
    {
        this.value = value;
    }

    // type

    public String getType()
    {
        return type;
    }


    public void setType(String type)
    {
        this.type = type;
    }

    // enabled

    public Boolean getEnabled()
    {
        return enabled;
    }


    public void setEnabled(Boolean enabled)
    {
        this.enabled = enabled;
    }

    // startPlay

    public Boolean getStartPlay()
    {
        return startPlay;
    }


    public void setStartPlay(Boolean startPlay)
    {
        this.startPlay = startPlay;
    }

    // backgroundImage

    public String getBackgroundImage()
    {
        return backgroundImage;
    }


    public void setBackgroundImage(String backgroundImage)
    {
        this.backgroundImage = backgroundImage;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<ButtonData> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public ButtonData newMessage()
    {
        return new ButtonData();
    }

    public Class<ButtonData> typeClass()
    {
        return ButtonData.class;
    }

    public String messageName()
    {
        return ButtonData.class.getSimpleName();
    }

    public String messageFullName()
    {
        return ButtonData.class.getName();
    }

    public boolean isInitialized(ButtonData message)
    {
        return true;
    }

    public void mergeFrom(Input input, ButtonData message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.name = input.readString();
                    break;
                case 2:
                    message.value = input.readInt64();
                    break;
                case 3:
                    message.type = input.readString();
                    break;
                case 4:
                    message.enabled = input.readBool();
                    break;
                case 5:
                    message.startPlay = input.readBool();
                    break;
                case 6:
                    message.backgroundImage = input.readString();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, ButtonData message) throws IOException
    {
        if(message.name != null)
            output.writeString(1, message.name, false);

        if(message.value != null)
            output.writeInt64(2, message.value, false);

        if(message.type != null)
            output.writeString(3, message.type, false);

        if(message.enabled != null)
            output.writeBool(4, message.enabled, false);

        if(message.startPlay != null)
            output.writeBool(5, message.startPlay, false);

        if(message.backgroundImage != null)
            output.writeString(6, message.backgroundImage, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
