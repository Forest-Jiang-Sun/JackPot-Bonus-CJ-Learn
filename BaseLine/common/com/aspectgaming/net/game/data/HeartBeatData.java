// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from GameProtocol.proto

package com.aspectgaming.net.game.data;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

public final class HeartBeatData implements Externalizable, Message<HeartBeatData>, Schema<HeartBeatData> {

    public static Schema<HeartBeatData> getSchema() {
        return DEFAULT_INSTANCE;
    }

    public static HeartBeatData getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    static final HeartBeatData DEFAULT_INSTANCE = new HeartBeatData();

    public long Value;

    public HeartBeatData() {}

    @Override
    public String toString() {
        return "HeartBeatData{" +
                    "value=" + Value +
                '}';
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<HeartBeatData> cachedSchema() {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public HeartBeatData newMessage() {
        return new HeartBeatData();
    }

    public Class<HeartBeatData> typeClass() {
        return HeartBeatData.class;
    }

    public String messageName() {
        return HeartBeatData.class.getSimpleName();
    }

    public String messageFullName() {
        return HeartBeatData.class.getName();
    }

    public boolean isInitialized(HeartBeatData message) {
        return true;
    }

    public void mergeFrom(Input input, HeartBeatData message) throws IOException {
        for (int number = input.readFieldNumber(this);; number = input.readFieldNumber(this)) {
            switch (number) {
            case 0:
                return;
            case 1:
                message.Value = input.readInt64();
                break;
            default:
                input.handleUnknownField(number, this);
            }
        }
    }

    public void writeTo(Output output, HeartBeatData message) throws IOException {
        if (message.Value != 0) output.writeInt64(1, message.Value, false);
    }

    public String getFieldName(int number) {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name) {
        return Integer.parseInt(name);
    }

}
