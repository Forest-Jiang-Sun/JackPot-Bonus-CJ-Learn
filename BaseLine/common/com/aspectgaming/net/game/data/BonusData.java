// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from GameProtocol.proto

package com.aspectgaming.net.game.data;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.aspectgaming.net.ProtoUtil;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

public final class BonusData implements Externalizable, Message<BonusData>, Schema<BonusData> {

    public static Schema<BonusData> getSchema() {
        return DEFAULT_INSTANCE;
    }

    public static BonusData getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    static final BonusData DEFAULT_INSTANCE = new BonusData();

    public int MaxSelectableBonus;
    public long Win;
    public int Multiplier;
    public long Mask;
    public int[] Values;
    public int[] WinCategoriesHit;

    public BonusData() {}

    @Override
    public String toString() {
        return "BonusData{" +
                    "maxSelectableBonus=" + MaxSelectableBonus +
                    ", win=" + Win +
                    ", multiplier=" + Multiplier +
                    ", mask=" + Mask +
                    ", values=" + Arrays.toString(Values) +
                    ", winCategoriesHit=" + Arrays.toString(WinCategoriesHit) +
                '}';
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<BonusData> cachedSchema() {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public BonusData newMessage() {
        return new BonusData();
    }

    public Class<BonusData> typeClass() {
        return BonusData.class;
    }

    public String messageName() {
        return BonusData.class.getSimpleName();
    }

    public String messageFullName() {
        return BonusData.class.getName();
    }

    public boolean isInitialized(BonusData message) {
        return true;
    }

    public void mergeFrom(Input input, BonusData message) throws IOException {
        List<Integer> Values = null;
        List<Integer> WinCatHit = null;
        try {
            for (int number = input.readFieldNumber(this);; number = input.readFieldNumber(this)) {
                switch (number) {
                case 0:
                    return;
                case 1:
                    message.MaxSelectableBonus = input.readInt32();
                    break;
                case 2:
                    message.Win = input.readInt64();
                    break;
                case 3:
                    message.Multiplier = input.readInt32();
                    break;
                case 4:
                    message.Mask = input.readInt64();
                    break;
                case 5:
                    if (Values == null) Values = new ArrayList<Integer>();
                    Values.add(input.readInt32());
                    break;
                case 6:
                    if (WinCatHit == null) WinCatHit = new ArrayList<Integer>();
                    WinCatHit.add(input.readInt32());
                    break;
                default:
                    input.handleUnknownField(number, this);
                }
            }
        } finally {
            message.Values = ProtoUtil.toIntArray(Values);
            message.WinCategoriesHit = ProtoUtil.toIntArray(WinCatHit);
        }
    }

    public void writeTo(Output output, BonusData message) throws IOException {
        if (message.MaxSelectableBonus != 0) output.writeInt32(1, message.MaxSelectableBonus, false);

        if (message.Win != 0) output.writeInt64(2, message.Win, false);

        if (message.Multiplier != 0) output.writeInt32(3, message.Multiplier, false);

        if (message.Mask != 0) output.writeInt64(4, message.Mask, false);

        if (message.Values != null) {
            for (Integer values : message.Values) {
                if (values != null) output.writeInt32(5, values, true);
            }
        }

        if (message.WinCategoriesHit != null) {
            for (Integer values : message.WinCategoriesHit) {
                if (values != null) output.writeInt32(6, values, true);
            }
        }
    }

    public String getFieldName(int number) {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name) {
        return Integer.parseInt(name);
    }

}
