// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from OneWallProtocol.proto

package com.aspectgaming.media.onewall.data;

import javax.annotation.Generated;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

@Generated("java_bean")
public final class AnimationInfo implements Externalizable, Message<AnimationInfo>, Schema<AnimationInfo>
{

    public static Schema<AnimationInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static AnimationInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final AnimationInfo DEFAULT_INSTANCE = new AnimationInfo();

    
    private String name;
    private List<VideoInfo> videos;
    private List<SoundInfo> sounds;
    private List<LedInfo> lED;

    public AnimationInfo()
    {

    }

    @Override
    public String toString() {
        return "AnimationInfo{" +
                    "name=" + name +
                    ", videos=" + videos +
                    ", sounds=" + sounds +
                    ", lED=" + lED +
                '}';
    }
    // getters and setters

    // name

    public String getName()
    {
        return name;
    }


    public void setName(String name)
    {
        this.name = name;
    }

    // videos

    public List<VideoInfo> getVideosList()
    {
        return videos;
    }


    public void setVideosList(List<VideoInfo> videos)
    {
        this.videos = videos;
    }

    // sounds

    public List<SoundInfo> getSoundsList()
    {
        return sounds;
    }


    public void setSoundsList(List<SoundInfo> sounds)
    {
        this.sounds = sounds;
    }

    // lED

    public List<LedInfo> getLEDList()
    {
        return lED;
    }


    public void setLEDList(List<LedInfo> lED)
    {
        this.lED = lED;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<AnimationInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public AnimationInfo newMessage()
    {
        return new AnimationInfo();
    }

    public Class<AnimationInfo> typeClass()
    {
        return AnimationInfo.class;
    }

    public String messageName()
    {
        return AnimationInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return AnimationInfo.class.getName();
    }

    public boolean isInitialized(AnimationInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, AnimationInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.name = input.readString();
                    break;
                case 2:
                    if(message.videos == null)
                        message.videos = new ArrayList<VideoInfo>();
                    message.videos.add(input.mergeObject(null, VideoInfo.getSchema()));
                    break;

                case 3:
                    if(message.sounds == null)
                        message.sounds = new ArrayList<SoundInfo>();
                    message.sounds.add(input.mergeObject(null, SoundInfo.getSchema()));
                    break;

                case 4:
                    if(message.lED == null)
                        message.lED = new ArrayList<LedInfo>();
                    message.lED.add(input.mergeObject(null, LedInfo.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, AnimationInfo message) throws IOException
    {
        if(message.name != null)
            output.writeString(1, message.name, false);

        if(message.videos != null)
        {
            for(VideoInfo videos : message.videos)
            {
                if(videos != null)
                    output.writeObject(2, videos, VideoInfo.getSchema(), true);
            }
        }


        if(message.sounds != null)
        {
            for(SoundInfo sounds : message.sounds)
            {
                if(sounds != null)
                    output.writeObject(3, sounds, SoundInfo.getSchema(), true);
            }
        }


        if(message.lED != null)
        {
            for(LedInfo lED : message.lED)
            {
                if(lED != null)
                    output.writeObject(4, lED, LedInfo.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
