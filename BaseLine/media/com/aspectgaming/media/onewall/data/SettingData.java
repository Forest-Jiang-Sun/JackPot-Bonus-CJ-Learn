// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from OneWallProtocol.proto

package com.aspectgaming.media.onewall.data;

import javax.annotation.Generated;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

@Generated("java_bean")
public final class SettingData implements Externalizable, Message<SettingData>, Schema<SettingData>
{

    public static Schema<SettingData> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static SettingData getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final SettingData DEFAULT_INSTANCE = new SettingData();

    
    private long iD;
    private String iP;
    private String theme;
    private String version;
    private List<AnimationInfo> animations;

    public SettingData()
    {

    }

    @Override
    public String toString() {
        return "SettingData{" +
                    "iD=" + iD +
                    ", iP=" + iP +
                    ", theme=" + theme +
                    ", version=" + version +
                    ", animations=" + animations +
                '}';
    }
    // getters and setters

    // iD

    public long getID()
    {
        return iD;
    }


    public void setID(long iD)
    {
        this.iD = iD;
    }

    // iP

    public String getIP()
    {
        return iP;
    }


    public void setIP(String iP)
    {
        this.iP = iP;
    }

    // theme

    public String getTheme()
    {
        return theme;
    }


    public void setTheme(String theme)
    {
        this.theme = theme;
    }

    // version

    public String getVersion()
    {
        return version;
    }


    public void setVersion(String version)
    {
        this.version = version;
    }

    // animations

    public List<AnimationInfo> getAnimationsList()
    {
        return animations;
    }


    public void setAnimationsList(List<AnimationInfo> animations)
    {
        this.animations = animations;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<SettingData> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public SettingData newMessage()
    {
        return new SettingData();
    }

    public Class<SettingData> typeClass()
    {
        return SettingData.class;
    }

    public String messageName()
    {
        return SettingData.class.getSimpleName();
    }

    public String messageFullName()
    {
        return SettingData.class.getName();
    }

    public boolean isInitialized(SettingData message)
    {
        return true;
    }

    public void mergeFrom(Input input, SettingData message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.iD = input.readInt64();
                    break;
                case 2:
                    message.iP = input.readString();
                    break;
                case 3:
                    message.theme = input.readString();
                    break;
                case 4:
                    message.version = input.readString();
                    break;
                case 5:
                    if(message.animations == null)
                        message.animations = new ArrayList<AnimationInfo>();
                    message.animations.add(input.mergeObject(null, AnimationInfo.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, SettingData message) throws IOException
    {
        if(message.iD != 0)
            output.writeInt64(1, message.iD, false);

        if(message.iP != null)
            output.writeString(2, message.iP, false);

        if(message.theme != null)
            output.writeString(3, message.theme, false);

        if(message.version != null)
            output.writeString(4, message.version, false);

        if(message.animations != null)
        {
            for(AnimationInfo animations : message.animations)
            {
                if(animations != null)
                    output.writeObject(5, animations, AnimationInfo.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
