// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from OneWallProtocol.proto

package com.aspectgaming.media.onewall.data;

import javax.annotation.Generated;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;

@Generated("java_bean")
public final class SoundInfo implements Externalizable, Message<SoundInfo>, Schema<SoundInfo>
{

    public static Schema<SoundInfo> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static SoundInfo getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final SoundInfo DEFAULT_INSTANCE = new SoundInfo();

    
    private long startTime;
    private long machineOffsetTime;
    private int loop;
    private String screen;
    private String file;
    private String mask;

    public SoundInfo()
    {

    }

    @Override
    public String toString() {
        return "SoundInfo{" +
                    "startTime=" + startTime +
                    ", machineOffsetTime=" + machineOffsetTime +
                    ", loop=" + loop +
                    ", screen=" + screen +
                    ", file=" + file +
                    ", mask=" + mask +
                '}';
    }
    // getters and setters

    // startTime

    public long getStartTime()
    {
        return startTime;
    }


    public void setStartTime(long startTime)
    {
        this.startTime = startTime;
    }

    // machineOffsetTime

    public long getMachineOffsetTime()
    {
        return machineOffsetTime;
    }


    public void setMachineOffsetTime(long machineOffsetTime)
    {
        this.machineOffsetTime = machineOffsetTime;
    }

    // loop

    public int getLoop()
    {
        return loop;
    }


    public void setLoop(int loop)
    {
        this.loop = loop;
    }

    // screen

    public String getScreen()
    {
        return screen;
    }


    public void setScreen(String screen)
    {
        this.screen = screen;
    }

    // file

    public String getFile()
    {
        return file;
    }


    public void setFile(String file)
    {
        this.file = file;
    }

    // mask

    public String getMask()
    {
        return mask;
    }


    public void setMask(String mask)
    {
        this.mask = mask;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<SoundInfo> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public SoundInfo newMessage()
    {
        return new SoundInfo();
    }

    public Class<SoundInfo> typeClass()
    {
        return SoundInfo.class;
    }

    public String messageName()
    {
        return SoundInfo.class.getSimpleName();
    }

    public String messageFullName()
    {
        return SoundInfo.class.getName();
    }

    public boolean isInitialized(SoundInfo message)
    {
        return true;
    }

    public void mergeFrom(Input input, SoundInfo message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.startTime = input.readInt64();
                    break;
                case 2:
                    message.machineOffsetTime = input.readInt64();
                    break;
                case 3:
                    message.loop = input.readInt32();
                    break;
                case 4:
                    message.screen = input.readString();
                    break;
                case 5:
                    message.file = input.readString();
                    break;
                case 6:
                    message.mask = input.readString();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, SoundInfo message) throws IOException
    {
        if(message.startTime != 0)
            output.writeInt64(1, message.startTime, false);

        if(message.machineOffsetTime != 0)
            output.writeInt64(2, message.machineOffsetTime, false);

        if(message.loop != 0)
            output.writeInt32(3, message.loop, false);

        if(message.screen != null)
            output.writeString(4, message.screen, false);

        if(message.file != null)
            output.writeString(5, message.file, false);

        if(message.mask != null)
            output.writeString(6, message.mask, false);
    }

    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }
    
}
